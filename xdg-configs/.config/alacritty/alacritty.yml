# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

window:
  # Window dimensions in character columns and lines
  # (changes require restart)
  dimensions:
    columns: 0
    lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 2
    y: 2

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Values for `decorations`:
  #- full: Borders and title bar
  #- none: Neither borders nor title bar
  #- buttonless: Title bar, transparent background and title bar buttons
  #- transparent: Title bar, transparent background, but no title bar buttons
  decorations: none

  # When true, alacritty starts maximized.
  startup_mode: Fullscreen

  # Window title
  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: Iosevka Nerd Font Mono
    # Style can be specified to pick a specific face.
    style: Book

  # The bold font face
  bold:
    family: Iosevka Nerd Font Mono
    # Style can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: Iosevka Nerd Font Mono
    # Style can be specified to pick a specific face.
    style: Italic

  # Point size of the font
  size: 14.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Colors (Gruvbox light)
# colors:
#   # Default colors
#   primary:
#     # hard contrast: background = '0xf9f5d7'
#     background: '0xfbf1c7'
#     # soft contrast: background = '0xf2e5bc'
#     foreground: '0x3c3836'

#   # Normal colors
#   normal:
#     black:   '0xfbf1c7'
#     red:     '0xcc241d'
#     green:   '0x98971a'
#     yellow:  '0xd79921'
#     blue:    '0x458588'
#     magenta: '0xb16286'
#     cyan:    '0x689d6a'
#     white:   '0x7c6f64'

#   # Bright colors
#   bright:
#     black:   '0x928374'
#     red:     '0x9d0006'
#     green:   '0x79740e'
#     yellow:  '0xb57614'
#     blue:    '0x076678'
#     magenta: '0x8f3f71'
#     cyan:    '0x427b58'
#     white:   '0x3c3836'

# Colors (Gruvbox Dark)
colors:
  primary:
    background: "#1d2021"
    foreground: "#ebdbbd"
  normal:
    black: "0x000000"
    red: "0xd54e53"
    green: "0xb9ca4a"
    yellow: "0xe6c547"
    blue: "0x7aa6da"
    magenta: "0xc397d8"
    cyan: "0x70c0ba"
    white: "0xeaeaea"
  bright:
    black: "0x666666"
    red: "0xff3334"
    green: "0x9ec400"
    yellow: "0xe7c547"
    blue: "0x7aa6da"
    magenta: "0xb77ee0"
    cyan: "0x54ced6"
    white: "0xffffff"

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  animation: EaseOutExpo
  duration: 0
  color: '0xffffff'

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
background_opacity: 1.0

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false


# Mouse bindings
#
# Available fields:
#   - mouse
#   - action
#   - mods (optional)
#
# Values for `mouse`:
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

   # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux) xdg-open
    #   - (Windows) explorer
    launcher:
      program: xdg-open
      args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    modifiers: "Control"


# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
# shell:
#   program: /bin/bash
#   args:
#     - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  # (macos bindings)
  - { key: N,      mods: Command,         action: SpawnNewInstance       }
  - { key: Key0,   mods: Command,         action: ResetFontSize          }
  - { key: Equals, mods: Command,         action: IncreaseFontSize       }
  - { key: Plus,   mods: Command,         action: IncreaseFontSize       }
  - { key: Minus,  mods: Command,         action: DecreaseFontSize       }
  - { key: K,      mods: Command,         action: ClearHistory           }
  - { key: K,      mods: Command,         chars: "\x0c"                  }
  - { key: V,      mods: Command,         action: Paste                  }
  - { key: C,      mods: Command,         action: Copy                   }
  - { key: H,      mods: Command,         action: Hide                   }
  - { key: Q,      mods: Command,         action: Quit                   }
  - { key: W,      mods: Command,         action: Quit                   }

  # (common bindings)
  - { key: Paste,                    action: Paste                      }
  - { key: Copy,                     action: Copy                       }
  - { key: L,         mods: Control, action: ClearLogNotice             }
  - { key: L,         mods: Control, chars: "\x0c"                      }
  - { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt }
  - { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt }
  - { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt }
  - { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt }
