# -*- indent-tabs-mode: nil; -*-
#+TITLE:Jassob's Conkeror configuration
#+DATE: <2017-09-18>

* TODO About this file
* TODO Initialization
** Conkeror imports

   We need to import some of the provided functionality to be able to
   customize it. Some things we want are for instance =session=,
   =mode-line=, =favicon= and the extension =adblockplus=.

   #+begin_src js3 :tangle init.js
     require("session.js");
     require("mode-line.js");
     require("favicon.js");
     require("adblockplus");
   #+end_src

** Autocompletion

   Sometimes commands and urls can be long and boring to type so let's
   enable some auto completion for the minibuffer!

   #+begin_src js3 :tangle init.js
     url_completion_use_history = true;
     url_completion_use_bookmarks = true;
     url_completion_use_webjumps = true;
     minibuffer_auto_complete_default = true;
   #+end_src

** Permissions

   We need to set permissions (like desktop-notifications, capturing
   of audio and video or geo location) per site and to make this easy
   with Conkeror we will define some nifty commmands for doing this.

   We start by naming the internal permission manager to make it
   easier to access it and define some permissions.

   #+begin_src js3 :tangle permissions.js
     // Permissions
     const permissionManager = Components.classes["@mozilla.org/permissionmanager;1"]
			       .getService(Components.interfaces.nsIPermissionManager);

     // List of web api permission
     var permissionsList = [
       {desc: "Audio Capture", value: "audio-capture"},
       {desc: "Video Capture", value: "video-capture"},
       {desc: "Geo Location", value: "geolocation"},
       {desc: "Desktop Notification", value: "desktop-notification"}
     ];
   #+end_src

   Now, lets add some functions fore adding and removing permissions.

   #+begin_src js3 :tangle permissions.js
     // read permission from minibuffer
     var readPermission = function(I) {
       return I.minibuffer.read(
	 $prompt = "Select permission:",
	 $completer = new all_word_completer(
	   $completions = permissionsList,
	   $get_string = function(x) {return x.value;},
	   $get_description = function(x) {return x.desc;}
	 )
       );
     };

     // add and remove permission for current page
     var addPermission = function(I) {
       var perm = yield readPermission(I);
       var uri = make_uri(I.buffer.current_uri.prePath);
       var allow = Components.interfaces.nsIPermissionManager.ALLOW_ACTION;

       permissionManager.add(uri, perm, allow);

       I.minibuffer.message("Permission " + perm + " added");
     };

     var removePermission = function(I) {
       var perm = yield readPermission(I);
       var uri = make_uri(I.buffer.current_uri.prePath);
       var deny = Components.interfaces.nsIPermissionManager.DENY_ACTION;

       permissionManager.add(uri, perm, deny);

       I.minibuffer.message("Permission " + perm + " removed");
     };
   #+end_src

   Finally we'll make sure that the commands are available from the
   =M-x= menu.

   #+begin_src js3 :tangle permissions.js
     interactive("add-permission", "Add specific permission for current uri", addPermission);
     interactive("remove-permission", "Remove specific permission for current uri", removePermission);
   #+end_src

* TODO Session and user variables

  Automatically save the current session when Conkeror is closed (by
  =C-x C-c=) and automatically load it when starting Conkeror.

  #+begin_src js3 :tangle init.js
    session_auto_save_auto_load = true;
  #+end_src

  It's sometimes nice to be remembered when previously logged in to a
  site.

  #+begin_src js3 :tangle init.js
    session_pref("signon.rememberSignons", true);
    session_pref("signon.expireMasterPassword", false);
    session_pref("signon.SignonFileName", "signons.txt");
  #+end_src

  Image animation might be nice, but it does not need to be enabled by
  default.

  #+begin_src js3 :tangle init.js
    session_pref('extensions.checkCompatibility', false);

    interactive("enable-gif-animation", "Enable gif animation", function (I) {
      session_pref("image.animation_mode", "normal");
    });
  #+end_src

  Other miscellaneous session variables, like the history expiration,
  whether extensions should check compatibility and so on.

  #+begin_src
    session_pref('browser.history_expire_days', 30);
    session_pref('extensions.checkCompatibility', false);
    session_pref("xpinstall.whitelist.required", false);
  #+end_src

* Cleanup

  We don't need all these different web jumps, so let's just remove them!

  #+begin_src js3 :tangle init.js
    var unused_webjumps = ['answers', 'buildd','buildd-ports','clhs','cliki'
			  ,'clusty','creativecommons','debbugs','debfile','debpkg'
			  ,'debpopcon','debpts','debqa','freshmeat','kuro5hin'
			  ,'launchpad','lucky','ratpoisonwiki','sadelicious'
			  ,'scholar','sdelicious','slashdot','sourceforge'
			  ,'stumpwmwiki','ubuntubugs','ubuntufile','ubuntupkg'
			  ,'wiktionary','yahoo'];

    for (var i=0; i<unused_webjumps.length; i++) {
	delete webjumps[unused_webjumps[i]];
    }
  #+end_src

* TODO Minibuffer
* Page-specific stuff

  Google Calendar mistakes Conkeror for a mobile device and serves a
  minimal version of their web page instead of the ordinary page (maybe they keep a whitelist of
  capable browsers and serves a minimal version to all other).

  This is fixed by reporting that we are actually Firefox and not Conkeror.

  #+begin_src js3 :tangle init.js
    require("user-agent-policy");

    // Tell Google Calendar that we are Firefox not Conkeror:
    user_agent_policy.define_policy(
        "GCal",
        user_agent_firefox(),
        build_url_regexp($domain = /(.*\.)?google/, $path = /calendar/)
    );
  #+end_src

